// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.17.1
// source: p2p/proto/mempool.proto

package spec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Support also non-validating node that wants to know of the mempool (e.g. to estimate fee in case of first price)
// Result is PooledTransactions+
type GetPooledTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Known:
	//
	//	*GetPooledTransactions_Txs
	//	*GetPooledTransactions_Marker
	Known isGetPooledTransactions_Known `protobuf_oneof:"known"`
}

func (x *GetPooledTransactions) Reset() {
	*x = GetPooledTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_mempool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPooledTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPooledTransactions) ProtoMessage() {}

func (x *GetPooledTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_mempool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPooledTransactions.ProtoReflect.Descriptor instead.
func (*GetPooledTransactions) Descriptor() ([]byte, []int) {
	return file_p2p_proto_mempool_proto_rawDescGZIP(), []int{0}
}

func (m *GetPooledTransactions) GetKnown() isGetPooledTransactions_Known {
	if m != nil {
		return m.Known
	}
	return nil
}

func (x *GetPooledTransactions) GetTxs() *GetPooledTransactions_Hashes {
	if x, ok := x.GetKnown().(*GetPooledTransactions_Txs); ok {
		return x.Txs
	}
	return nil
}

func (x *GetPooledTransactions) GetMarker() uint64 {
	if x, ok := x.GetKnown().(*GetPooledTransactions_Marker); ok {
		return x.Marker
	}
	return 0
}

type isGetPooledTransactions_Known interface {
	isGetPooledTransactions_Known()
}

type GetPooledTransactions_Txs struct {
	Txs *GetPooledTransactions_Hashes `protobuf:"bytes,1,opt,name=txs,proto3,oneof"` // for mempool of 2000 txs, this will be 64K. Can use Hash32 instead (8K)...
}

type GetPooledTransactions_Marker struct {
	Marker uint64 `protobuf:"varint,2,opt,name=marker,proto3,oneof"` // since last returned marker.
}

func (*GetPooledTransactions_Txs) isGetPooledTransactions_Known() {}

func (*GetPooledTransactions_Marker) isGetPooledTransactions_Known() {}

type NewPooledTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Marker       uint64         `protobuf:"varint,2,opt,name=marker,proto3" json:"marker,omitempty"` // optional, if the peer supports that.
}

func (x *NewPooledTransactions) Reset() {
	*x = NewPooledTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_mempool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPooledTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPooledTransactions) ProtoMessage() {}

func (x *NewPooledTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_mempool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPooledTransactions.ProtoReflect.Descriptor instead.
func (*NewPooledTransactions) Descriptor() ([]byte, []int) {
	return file_p2p_proto_mempool_proto_rawDescGZIP(), []int{1}
}

func (x *NewPooledTransactions) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *NewPooledTransactions) GetMarker() uint64 {
	if x != nil {
		return x.Marker
	}
	return 0
}

// TBD: trusted. Alternative is to sync on transactions or on contract diff (remove key-value) to get latest nonce
type IncludedTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// just send the hash. (note: a node should remove txs with same/lower nonce)
	// TBD: Merkle proofs of contract state instead?
	Transactions []*Hash `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Marker       uint64  `protobuf:"varint,2,opt,name=marker,proto3" json:"marker,omitempty"` // should be the same as New
}

func (x *IncludedTransactions) Reset() {
	*x = IncludedTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_mempool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncludedTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncludedTransactions) ProtoMessage() {}

func (x *IncludedTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_mempool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncludedTransactions.ProtoReflect.Descriptor instead.
func (*IncludedTransactions) Descriptor() ([]byte, []int) {
	return file_p2p_proto_mempool_proto_rawDescGZIP(), []int{2}
}

func (x *IncludedTransactions) GetTransactions() []*Hash {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *IncludedTransactions) GetMarker() uint64 {
	if x != nil {
		return x.Marker
	}
	return 0
}

type GetPooledTransactions_Hashes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashes []*Hash `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (x *GetPooledTransactions_Hashes) Reset() {
	*x = GetPooledTransactions_Hashes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_proto_mempool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPooledTransactions_Hashes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPooledTransactions_Hashes) ProtoMessage() {}

func (x *GetPooledTransactions_Hashes) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_proto_mempool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPooledTransactions_Hashes.ProtoReflect.Descriptor instead.
func (*GetPooledTransactions_Hashes) Descriptor() ([]byte, []int) {
	return file_p2p_proto_mempool_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GetPooledTransactions_Hashes) GetHashes() []*Hash {
	if x != nil {
		return x.Hashes
	}
	return nil
}

var File_p2p_proto_mempool_proto protoreflect.FileDescriptor

var file_p2p_proto_mempool_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x32, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x70, 0x32, 0x70, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x70, 0x32, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x03, 0x74, 0x78, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x48, 0x00, 0x52, 0x03, 0x74, 0x78, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x27, 0x0a, 0x06, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x42, 0x07,
	0x0a, 0x05, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0x61, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x50, 0x6f,
	0x6f, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x30, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x59, 0x0a, 0x14, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x29, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x75, 0x6e, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x6b, 0x6e, 0x65,
	0x74, 0x2f, 0x70, 0x32, 0x70, 0x2f, 0x73, 0x70, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_p2p_proto_mempool_proto_rawDescOnce sync.Once
	file_p2p_proto_mempool_proto_rawDescData = file_p2p_proto_mempool_proto_rawDesc
)

func file_p2p_proto_mempool_proto_rawDescGZIP() []byte {
	file_p2p_proto_mempool_proto_rawDescOnce.Do(func() {
		file_p2p_proto_mempool_proto_rawDescData = protoimpl.X.CompressGZIP(file_p2p_proto_mempool_proto_rawDescData)
	})
	return file_p2p_proto_mempool_proto_rawDescData
}

var file_p2p_proto_mempool_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_p2p_proto_mempool_proto_goTypes = []interface{}{
	(*GetPooledTransactions)(nil),        // 0: GetPooledTransactions
	(*NewPooledTransactions)(nil),        // 1: NewPooledTransactions
	(*IncludedTransactions)(nil),         // 2: IncludedTransactions
	(*GetPooledTransactions_Hashes)(nil), // 3: GetPooledTransactions.Hashes
	(*Transaction)(nil),                  // 4: Transaction
	(*Hash)(nil),                         // 5: Hash
}
var file_p2p_proto_mempool_proto_depIdxs = []int32{
	3, // 0: GetPooledTransactions.txs:type_name -> GetPooledTransactions.Hashes
	4, // 1: NewPooledTransactions.transactions:type_name -> Transaction
	5, // 2: IncludedTransactions.transactions:type_name -> Hash
	5, // 3: GetPooledTransactions.Hashes.hashes:type_name -> Hash
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_p2p_proto_mempool_proto_init() }
func file_p2p_proto_mempool_proto_init() {
	if File_p2p_proto_mempool_proto != nil {
		return
	}
	file_p2p_proto_common_proto_init()
	file_p2p_proto_transaction_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_p2p_proto_mempool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPooledTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_mempool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPooledTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_mempool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncludedTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_p2p_proto_mempool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPooledTransactions_Hashes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_p2p_proto_mempool_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GetPooledTransactions_Txs)(nil),
		(*GetPooledTransactions_Marker)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_p2p_proto_mempool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_p2p_proto_mempool_proto_goTypes,
		DependencyIndexes: file_p2p_proto_mempool_proto_depIdxs,
		MessageInfos:      file_p2p_proto_mempool_proto_msgTypes,
	}.Build()
	File_p2p_proto_mempool_proto = out.File
	file_p2p_proto_mempool_proto_rawDesc = nil
	file_p2p_proto_mempool_proto_goTypes = nil
	file_p2p_proto_mempool_proto_depIdxs = nil
}
